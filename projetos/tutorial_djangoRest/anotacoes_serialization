- Pacotes necessários para a realização deste tutorial:

    pip install django
    pip install djangorestframework
    pip install pygments

====================================================================================

- Para exemplicar a funcionalidade serializon, primeiro cria-se um projeto django,
e logo após cria-se um app. Ex:

    django-admin startproject tutorial_djangoRest
    python manage.py startapp snippets

====================================================================================

- Dentro do arquivo settings.py, é necessário registrar tanto o rest_framework quanto
o app criado:

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'rest_framework',  --> Registrando rest_framework
        'snippets.apps.SnippetsConfig' --> Registrando app criado
    ]

====================================================================================

- No arquivo models.py é realizado a definição dos Models que serão utilizados. Ex:

    from __future__ import unicode_literals

    from django.db import models

    from pygments.lexers import get_all_lexers
    from pygments.styles import get_all_styles


    LEXERS = [item for item in get_all_lexers() if item[1]]
    LANGUAGE_CHOICES = sorted([(item[1][0], item[0]) for item in LEXERS])
    STYLE_CHOICES = sorted([(item, item) for item in get_all_styles()])

    # Create your models here.

    class Snippet(models.Model):
        created = models.DateTimeField(auto_now_add=True)
        title = models.CharField(max_length=100, blank=True, default='')
        code = models.TextField()
        lineons = models.BooleanField(default=False)
        language = models.CharField(choices=LANGUAGE_CHOICES, default='python', max_length=100)
        style = models.CharField(choices=STYLE_CHOICES, default='friendly', max_length=100)
        
        class Meta:
            ordering = ['created']

====================================================================================

- Sempre que são realizadas alterações no arquivo models.py, é necessário realizar
as migrações:

    python manage.py makemigrations
    python manage.py migrate

====================================================================================
