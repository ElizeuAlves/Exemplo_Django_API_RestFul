Tutorial usado como base para este projeto: https://www.django-rest-framework.org/tutorial/1-serialization/


- Pacotes necessários para a realização deste tutorial:

    pip install django
    pip install djangorestframework
    pip install pygments

====================================================================================

- Para exemplicar a funcionalidade serializon, primeiro cria-se um projeto django,
e logo após cria-se um app. Ex:

    django-admin startproject tutorial_djangoRest
    python manage.py startapp snippets

====================================================================================

- Dentro do arquivo settings.py, é necessário registrar tanto o rest_framework quanto
o app criado:

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'rest_framework',  --> Registrando rest_framework
        'snippets.apps.SnippetsConfig' --> Registrando app criado
    ]

====================================================================================

- No arquivo models.py é realizado a definição dos Models que serão utilizados. Ex:

    from __future__ import unicode_literals

    from django.db import models

    from pygments.lexers import get_all_lexers
    from pygments.styles import get_all_styles


    LEXERS = [item for item in get_all_lexers() if item[1]]
    LANGUAGE_CHOICES = sorted([(item[1][0], item[0]) for item in LEXERS])
    STYLE_CHOICES = sorted([(item, item) for item in get_all_styles()])

    # Create your models here.

    class Snippet(models.Model):
        created = models.DateTimeField(auto_now_add=True)
        title = models.CharField(max_length=100, blank=True, default='')
        code = models.TextField()
        lineons = models.BooleanField(default=False)
        language = models.CharField(choices=LANGUAGE_CHOICES, default='python', max_length=100)
        style = models.CharField(choices=STYLE_CHOICES, default='friendly', max_length=100)
        
        class Meta:
            ordering = ['created']

====================================================================================

- Sempre que são realizadas alterações no arquivo models.py, é necessário realizar
as migrações:

    python manage.py makemigrations
    python manage.py migrate

====================================================================================

- O arquivo serializers.py é criado para conseguirmos apresentar os dados do BD em
formato JSON. Este arquivo é criado dentro do app, e ficará da seguinte forma:

    from rest_framework import serializers
    from snippets.models import Snippet, LANGUAGE_CHOICES, STYLE_CHOICES


    class SnippetSerializer(serializers.Serializer):

        # Definindo quais campos serão serializados
        id = serializers.IntegerField(read_only=True)
        title = serializers.CharField(required=False, allow_blank=True, max_length=100)
        code = serializers.CharField(style={'base_template': 'textarea.html'})
        linenos = serializers.BooleanField(required=False)
        language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default='python')
        style = serializers.ChoiceField(choices=STYLE_CHOICES, default='friendly')


        # Cria e retorna uma nova instância de Snippet
        def create(self, valited_data):
            return Snippet.objects.create(**valited_data)
    
        
        # Atualiza uma instância já existente            
        def update(self, instance, valited_data):
            instance.title = valited_data.get('title', instance.title)
            instance.code = validated_data.get('code', instance.code)
            instance.linenos = validated_data.get('linenos', instance.linenos)
            instance.language = validated_data.get('language', instance.language)
            instance.style = validated_data.get('style', instance.style)
            instance.save()
            return instance

====================================================================================

- Como é possível ver no código da classe SnippetSerializer, muitas informações que
já estão na Model Snippet estão sendo replicadas na classe. Para diminuirmos o número
de linhas de código, podemos reescrever esta classe, utilizando a classe ModelSerializer;

    class SnippetSerializer(serializers.ModelSerializer):
        
        class Meta:
            model = Snippet
            fields = ['id', 'title', 'code', 'linenos', 'language', 'style']

====================================================================================

- Com o serializer definido, é possível criar as views utilizando a nova classe
serializer que foi criada. Primeiro, definimos uma view para métodos GET e POST:

    @csrf_exempt
    def snippet_list(request):

        if request.method == 'GET':
            snippets = Snippet.objects.all()
            serializer = SnippetSerializer(snippets, many=True)
            return JsonResponse(serializer.data, safe=False)


        if request.method == 'POST':
            data = JSONParser().parse(request)
            serializer = SnippetSerializer(data=data)
            if serializer.is_valid():
                serializer.save()
                return JsonResponse(serializer.data, status=201)
            return JsonResponse(serializer.errors, status=400)

====================================================================================

- No código acima definimos dois métodos, porém, nenhum deles manipula um snippet de forma individual. Para isso, criamos mais uma view que irá realizar esta função:

    def snippet_detail(request, pk):
        try:
            snippet = Snippet.objects.get(pk=pk)
        except Snippet.DoesNotExist:
            return HttpResponse(status=404)


        if request.method == 'GET':
            serializer = SnippetSerializer(snippet)
            return JsonResponse(serializer.data)
        
        elif request.method == 'POST':
            data = JSONParser().parse(request)
            serializer =SnippetSerializer(snippet, data=data)

            if serializer.is_valid():
                serializer.save()
                return JsonResponse(serializer.data)

            return JsonResponse(serializer.errors, status=400)
        
        elif request.method == 'DELETE':
            snippet.delete()
            return HttpResponse(status=204)

====================================================================================

- Com as views criadas, precisamos criar um arquivo urls.py no app, para criarmos
uma ligação entre a URL e a view:

    from django.urls import path
    from snippets import views

    urlpatterns = [
        path('snippets/', views.snippet_list),
        path('snippets/<int:pk>/', views.snippet_detail),
    ]

====================================================================================

- Também precisamos configurar o arquivo urls.py do projeto, para incluirmos a URL
do app snippet:

    from django.conf.urls import url
    from django.contrib import admin
    from django.urls import path, include

    urlpatterns = [
        path('', include('snippets.urls')),
        url(r'^admin/', admin.site.urls),
    ]

====================================================================================

- Com todas as configurações realizadas, podemos testar a API usando ferramentas como
CURL ou HTTPIE. Ex:

http http://127.0.0.1:8000/snippets/  --> GET com HTTPIE

curl http://127.0.0.1:8000/snippets/  --> GET com CURL
